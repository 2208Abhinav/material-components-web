//
// Copyright 2018 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions://
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.//
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@import './variables';

@function mdc-shape-flip-radius($radius) {
  @if length($radius) == 4 {
    @return nth($radius, 2) nth($radius, 1) nth($radius, 4) nth($radius, 3);
  } @else if length($radius) == 3 {
    @return nth($radius, 2) nth($radius, 1) nth($radius, 2) nth($radius, 3);
  } @else if length($radius) == 2 {
    @return nth($radius, 2) nth($radius, 1);
  } @else {
    @return $radius;
  }
}

@function mdc-shape-resolve-pill-radius($component-height, $radius) {
  @if type-of($radius) == "list" {
    $radius-value: ();
    @each $corner in $radius {
      $radius-value: append($radius-value, mdc-shape-resolve-pill-corner_($component-height, $corner));
    }
    @return $radius-value;
  } @else {
    @return mdc-shape-resolve-pill-corner_($component-height, $radius);
  }
}

@function mdc-shape-resolve-pill-corner_($component-height, $radius) {
  @if $radius == pill {
    @return $component-height / 2;
  } @else {
    @return $radius;
  }
}

@function mdc-shape-prop-value($radius) {
  @if type-of($radius) == "list" {
    $radius-value: ();
    @each $corner in $radius {
      $radius-value: append($radius-value, mdc-shape-prop-corner-value_($corner));
    }
    @return $radius-value;
  } @else {
    @return mdc-shape-prop-corner-value_($radius);
  }
}

@function mdc-shape-prop-corner-value_($radius) {
  @if mdc-shape-is-valid-radius-value_($radius) {
    @return $radius;
  } @else if not map-has-key($mdc-shape-category-values, $radius) {
    @error "Invalid radius: '#{$radius}' radius in not defined";
  }

  @return map-get($mdc-shape-category-values, $radius);
}

@function mdc-shape-is-valid-radius-value_($radius) {
  @return type-of($radius) == "number" or str_index($radius, "var(") or str_index($radius, "calc(");
}

@function mdc-shape-is-valid-radius($radius) {
  $radius: mdc-shape-prop-value($radius);

  @if type-of($radius) == "list" {
    @each $corner in $radius {
      @if not mdc-shape-is-valid-radius-value_($radius) {
        @return false;
      }
    }
  } @else if not mdc-shape-is-valid-radius-value_($radius) {
    @return false;
  }

  @return true;
}
